#-------------------------------------------------------------------------------
# Set defaults (is re-set by machine specific configuration file)
#-------------------------------------------------------------------------------
set serial_console=false
set serial_baud=57600
set serial_line=0
set graphic_console=true
set kernel_options=""

# preset architecture, so it will never be empty
if [ "$grub_cpu" == "i386" ]; then
    set arch='x86_64'
elif [ "$grub_cpu" == "x86_64" ]; then
    set arch='x86_64'
elif [ "$grub_cpu" == "powerpc" ]; then
    set arch='ppc64le'
fi

#-------------------------------------------------------------------------------
# MAC address
#-------------------------------------------------------------------------------
set mac=${net_default_mac}

export mac

#-------------------------------------------------------------------------------
# Booting
#-------------------------------------------------------------------------------
set default='local'
set timeout=15
set dist_list="SLE-15-Installer-LATEST SLE-15-Installer-GMC2"
set dist_list="${dist_list} SLE-12-SP4-Server-LATEST"
set dist_list="${dist_list} SLE-12-SP3-Server-LATEST SLE-12-SP3-Server-GM"
set dist_list="${dist_list} SLE-12-SP2-Server-LATEST SLE-12-SP2-Server-GM"
set dist_list="${dist_list} SLE-12-SP1-Server-GM"
set dist_list="${dist_list} SLE-12-Server-GM"

export default
export timeout
export dist_list

#-------------------------------------------------------------------------------
# Machine specific configuration
#-------------------------------------------------------------------------------
source ${prefix}/00-config/${mac}

export arch
export serial_console
export serial_baud
export serial_line
export graphic_console
export kernel_options
#-------------------------------------------------------------------------------
# Serial
#-------------------------------------------------------------------------------
if [ $serial_console == true -a "$grub_platform" != "efi" ]; then
    #echo "serial"; sleep 3
    serial --speed=$serial_baud --unit=$serial_line --word=8 --parity=no --stop=1
    terminal_input --append serial
    terminal_output --append serial
else
    #echo "console"; sleep 3
    terminal_input console
    terminal_output console
fi

#-------------------------------------------------------------------------------
# EFI support
#-------------------------------------------------------------------------------
if [ "$grub_platform" == "efi" ]; then
    function linux {
        linuxefi "$@"
    }

    function initrd {
        initrdefi "$@"
    }
fi

#-------------------------------------------------------------------------------
# Additional grub configuration (arch dependent)
#-------------------------------------------------------------------------------
set install_server='ftp://music.arch.suse.de/'
set install_dist=''
set autoyast_server="ftp://music.arch.suse.de/autoinst/${arch}/"

source ${prefix}/${arch}/02-grub.cfg

export install_server
export install_dist
export autoyast_server

#-------------------------------------------------------------------------------
# Custom overrides
#-------------------------------------------------------------------------------
source ${prefix}/${arch}/90-custom/${hostname}

#-------------------------------------------------------------------------------
# Menus
#-------------------------------------------------------------------------------
if [ -z $stop_after_custom ]; then

    menuentry 'local' {
        if [ "$grub_platform" == "efi" ]; then
            search -s root -n -f /efi/boot/bootx64.efi
            set prefix=(${root})/efi/opensuse
            chainloader ${prefix}/grub.efi
            boot # if it doesn't exist, go on
            set prefix=(${root})/efi/sles
            chainloader ${prefix}/grub.efi
            boot # if it doesn't exist, go on
            set prefix=(${root})/efi/grub
            chainloader ${prefix}/grub.efi
            # this may be dangerous for NVRAM
            #search -s root -n -f /efi/boot/bootx64.efi
            #set prefix=(${root})/efi/boot
            chainloader ${prefix}/bootx64.efi
            boot # if it doesn't exist, leave grub and enter shell
            exit
        elif [ "${grub_cpu}-${grub_platform}" == "i386-pc" ]; then
            # grub.pxe: we do need to chainload here
            set root=hd0
            chainloader ($root)+1
            boot
        elif [ "${grub_cpu}-${grub_platform}" == "powerpc-ieee1275" ]; then
            set btrfs_relative_path="y"
            export btrfs_relative_path

            echo "powerpc-ieee1275: search for local grub.cfg..."
            for c in /boot/grub2/grub.cfg /boot/grub/grub.cfg; do
                if search -s root -f "$c"; then
                    echo "powerpc-ieee1275: found ($root)$c"
                    configfile "$c"
                fi
            done
        fi

        exit
    }

    for dist_item_ in $dist_list; do
        submenu "$dist_item_" {
            dist_item=$1
            if regexp SLE.* $1 ; then
                regexp --set 1:dist --set 2:ver --set 3:sp --set 4:product --set 5:milestone \(SLE\)-\([1-9][0-9]\)\(-SP[1-9]\)?-\([a-zA-Z0-9]+\)-\([a-zA-Z0-9]+\) "$1"
            elif regexp openSUSE.* $1 ; then
                regexp --set 1:dist --set 2:product --set 3:ver \(openSUSE\)-\([a-zA-Z0-9]+\)\(-[0-9]+\.[0-9]+\)? "$1"
            else
                break
            fi
            tr -s template -D "${dist}"
            source ${prefix}/${arch}/99-${template}.cfg
        }
    done

fi
